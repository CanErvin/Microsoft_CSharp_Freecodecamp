Console.WriteLine("Hello\nWorld!");
Console.WriteLine("Hello\tWorld!");

/* Output
Hello
World!
Hello   World!*/

Console.WriteLine("Hello \"World\"!");
Console.WriteLine("Hello World\"!");
//you use the \\ to display a single backslash.
Console.WriteLine("c:\\source\\repos");
//A verbatim string literal will keep all whitespace and characters without the need to escape the backslash. To create a verbatim string, use the @ directive before the literal string.
Console.WriteLine(@"    c:\source\repos    
        (this is where your code goes)");

/*
Here's what you've learned about formatting literal strings so far:

Use character escape sequences when you need to insert a special character into a literal string, like a tab \t, new line \n, or a double quotation mark \".
Use an escape character for the backslash \\ when you need to use a backslash in all other scenarios.
Use the @ directive to create a verbatim string literal that keeps all whitespace formatting and backslash characters in a string.
Use the \u plus a four-character code to represent Unicode characters (UTF-16) in a string.
Unicode characters may not print correctly depending on the application.
*/
